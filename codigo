diff --git a/codigo b/codigo
index dd3b14edd45963db8f97c038788d4178a4af0381..bdac685ee1635a9bc5394b334ec3a49d9b928a8d 100644
--- a/codigo
+++ b/codigo
@@ -1,27 +1,27 @@
 'use client';
-import React, { useState, useMemo } from 'react';
+import React, { useState, useMemo, useCallback } from 'react';
 import {
   Calculator,
   TrendingUp,
   AlertCircle,
   CheckCircle,
   DollarSign,
   Calendar,
   LogIn,
   LogOut,
   User
 } from 'lucide-react';
 
 export default function CalculadoraIRDividendos() {
   const [isLoggedIn, setIsLoggedIn] = useState(false);
   const [username, setUsername] = useState('');
   const [password, setPassword] = useState('');
   const [loginError, setLoginError] = useState('');
   const [currentUser, setCurrentUser] = useState('');
 
   // Estados da calculadora
   const [dividendosMes, setDividendosMes] = useState('');
   const [rendimentosMes, setRendimentosMes] = useState('');
   const [rendimentosAno, setRendimentosAno] = useState('');
   const [aliquotaEfetivaPJ, setAliquotaEfetivaPJ] = useState('34');
   const [lucrosAte2025, setLucrosAte2025] = useState(false);
@@ -61,56 +61,100 @@ export default function CalculadoraIRDividendos() {
       irDevido = 0;
     } else if (base <= 33919.80) {
       irDevido = (base - 24511.92) * 0.075;
     } else if (base <= 45012.60) {
       irDevido =
         (33919.80 - 24511.92) * 0.075 + (base - 33919.80) * 0.15;
     } else if (base <= 55976.16) {
       irDevido =
         (33919.80 - 24511.92) * 0.075 +
         (45012.60 - 33919.80) * 0.15 +
         (base - 45012.60) * 0.225;
     } else {
       irDevido =
         (33919.80 - 24511.92) * 0.075 +
         (45012.60 - 33919.80) * 0.15 +
         (55976.16 - 45012.60) * 0.225 +
         (base - 55976.16) * 0.275;
     }
 
     const aliquotaEfetiva =
       rendimentoAnual > 0 ? (irDevido / rendimentoAnual) * 100 : 0;
 
     return { irDevido, aliquotaEfetiva, baseCalculo: base };
   };
 
+  const parseNumericInput = useCallback((value) => {
+    if (typeof value === 'number') {
+      return Number.isFinite(value) ? value : 0;
+    }
+
+    if (typeof value !== 'string') {
+      return 0;
+    }
+
+    const trimmed = value.trim();
+    if (!trimmed) {
+      return 0;
+    }
+
+    const withoutSpaces = trimmed.replace(/\s+/g, '');
+    const isNegative = withoutSpaces.startsWith('-');
+    const unsigned = isNegative ? withoutSpaces.slice(1) : withoutSpaces;
+
+    const lastComma = unsigned.lastIndexOf(',');
+    const lastDot = unsigned.lastIndexOf('.');
+
+    let integerPart = unsigned;
+    let decimalPart = '';
+
+    if (lastComma > lastDot) {
+      integerPart = unsigned.slice(0, lastComma).replace(/[.,\s]/g, '');
+      decimalPart = unsigned.slice(lastComma + 1).replace(/[^\d]/g, '');
+    } else if (lastDot > lastComma) {
+      integerPart = unsigned.slice(0, lastDot).replace(/[.,\s]/g, '');
+      decimalPart = unsigned.slice(lastDot + 1).replace(/[^\d]/g, '');
+    } else {
+      integerPart = unsigned.replace(/[^\d]/g, '');
+    }
+
+    const normalised = decimalPart ? `${integerPart}.${decimalPart}` : integerPart;
+    const parsed = Number.parseFloat(normalised);
+
+    if (Number.isNaN(parsed)) {
+      return 0;
+    }
+
+    return isNegative ? -parsed : parsed;
+  }, []);
+
   const calculos = useMemo(() => {
-    const divMes = parseFloat(dividendosMes) || 0;
-    const rendMes = parseFloat(rendimentosMes) || 0;
-    const rendAno = parseFloat(rendimentosAno) || 0;
-    const aliqPJ = parseFloat(aliquotaEfetivaPJ) || 0;
-    const deduc = parseFloat(deducoes) || 0;
+    const divMes = parseNumericInput(dividendosMes);
+    const rendMes = parseNumericInput(rendimentosMes);
+    const rendAno = parseNumericInput(rendimentosAno);
+    const aliqPJ = parseNumericInput(aliquotaEfetivaPJ);
+    const deduc = parseNumericInput(deducoes);
 
     // CÁLCULO IRPF SOBRE RENDIMENTOS DO TRABALHO
     const rendimentoTrabalhoAnual = rendAno + rendMes * 12;
     const irpfTrabalho = calcularIRPFTrabalho(rendimentoTrabalhoAnual, deduc);
 
     // RETENÇÃO NA FONTE SOBRE DIVIDENDOS (MENSAL)
     let retencaoFonte = 0;
     let baseRetencao = 0;
     let isento = false;
 
     if (lucrosAte2025 && aprovadoAte2025) {
       isento = true;
     } else if (divMes > 50000) {
       baseRetencao = divMes - 50000;
       retencaoFonte = baseRetencao * 0.10;
     }
 
     // IMPOSTO MÍNIMO ANUAL (IRPFM)
     const rendaTotalAnual = rendimentoTrabalhoAnual + divMes * 12;
     let irpfm = 0;
     let aliquotaIRPFM = 0;
 
     if (rendaTotalAnual > 600000 && !isento) {
       if (rendaTotalAnual <= 1200000) {
         const faixaProgressiva = rendaTotalAnual - 600000;
@@ -153,52 +197,57 @@ export default function CalculadoraIRDividendos() {
       tributacaoCombinada,
       tributacaoFinal,
       redutor,
       ultrapassaLimite,
       retencaoAnual,
       irpfTrabalho,
       rendimentoTrabalhoAnual
     };
   }, [
     dividendosMes,
     rendimentosMes,
     rendimentosAno,
     aliquotaEfetivaPJ,
     lucrosAte2025,
     aprovadoAte2025,
     deducoes
   ]);
 
   const formatCurrency = (value) =>
     new Intl.NumberFormat('pt-BR', {
       style: 'currency',
       currency: 'BRL'
     }).format(Number.isFinite(value) ? value : 0);
 
   const formatPercent = (value) => {
-    const v = Number.isFinite(value) ? value : 0;
-    return v.toFixed(2) + '%';
+    const normalised = Number.isFinite(value) ? value : 0;
+    return (
+      new Intl.NumberFormat('pt-BR', {
+        minimumFractionDigits: 2,
+        maximumFractionDigits: 2
+      }).format(normalised) + '%'
+    );
   };
 
   // TELA DE LOGIN
   if (!isLoggedIn) {
     return (
       <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-6">
         <div className="bg-white rounded-lg shadow-2xl p-8 max-w-md w-full">
           {/* Logo */}
           <div className="flex justify-center mb-8">
             <div className="text-center">
               <div className="mb-4">
                 <svg viewBox="0 0 200 80" className="w-48 h-20 mx-auto">
                   <text
                     x="50%"
                     y="35"
                     textAnchor="middle"
                     fill="#D4AF37"
                     fontSize="40"
                     fontWeight="bold"
                     fontFamily="Arial, sans-serif"
                   >
                     NK
                   </text>
                   <text
                     x="50%"
@@ -245,58 +294,61 @@ export default function CalculadoraIRDividendos() {
                   className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                   placeholder="Digite seu usuário"
                   autoComplete="username"
                 />
               </div>
             </div>
 
             <div>
               <label className="block text-sm font-medium text-gray-700 mb-2">
                 Senha
               </label>
               <div className="relative">
                 <LogIn className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                 <input
                   type="password"
                   value={password}
                   onChange={(e) => setPassword(e.target.value)}
                   className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                   placeholder="Digite sua senha"
                   autoComplete="current-password"
                 />
               </div>
             </div>
 
             {loginError && (
-              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm">
+              <div
+                className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm"
+                role="alert"
+                aria-live="polite"
+              >
                 {loginError}
               </div>
             )}
 
             <button
-              type="button"
-              onClick={handleLogin}
+              type="submit"
               className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 rounded-lg transition duration-200 flex items-center justify-center gap-2"
             >
               <LogIn className="w-5 h-5" />
               Entrar no Sistema
             </button>
           </form>
 
           <div className="mt-6 text-center text-xs text-gray-500">
             <p>Calculadora PL 1087/2025 - Tributação de Dividendos</p>
             <p className="mt-1">© 2025 Nakamura Advogados</p>
           </div>
         </div>
       </div>
     );
   }
 
   // TELA DA CALCULADORA (após login)
   return (
     <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
       <div className="max-w-7xl mx-auto">
         {/* Header com Logo e Logout */}
         <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
           <div className="flex items-center justify-between mb-4">
             <div className="flex items-center gap-4">
               <svg viewBox="0 0 200 80" className="w-32 h-14">
